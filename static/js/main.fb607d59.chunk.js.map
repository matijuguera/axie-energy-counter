{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","currentEnergies","setCurrentEnergies","addEnergy","amount","e","Container","className","EnemyEnergiesContainer","EnemyEnergiesLabel","AddEnergyContainer","Button","variant","color","onClick","FinishTurnContainer","ResetGameContainer","styled","div","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAyDeA,MAhDf,WACE,MAA8CC,IAAMC,SAL7B,GAKvB,mBAAOC,EAAP,KAAwBC,EAAxB,KAEA,SAASC,EAAUC,GAEfF,EADED,EAAkBG,GANG,MAUN,SAAAC,GAAC,OAAIA,EAAID,IAmB9B,OACE,eAACE,EAAD,CAAWC,UAAU,MAArB,UAEE,cAACC,EAAD,UACE,eAACC,EAAD,8BAAqCR,OAEvC,eAACS,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAWC,QAnBnD,WACEX,GAAW,IAkBP,gBACA,cAACQ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAWC,QAxBnD,WACEX,EAAU,IAuBN,mBAEF,cAACY,EAAD,UACE,cAACJ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAnBlD,WACEX,EAvBwB,IAyCpB,4BAEF,cAACa,EAAD,UACE,cAACL,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAlBlD,WACEZ,EA5BqB,IA6CjB,8BAWFI,EAAYW,IAAOC,IAAV,8CAITV,EAAyBS,IAAOC,IAAV,0EAKtBT,EAAqBQ,IAAOC,IAAV,oLAUlBR,EAAqBO,IAAOC,IAAV,8GArBT,OA4BTH,EAAsBE,IAAOC,IAAV,iDA5BV,IAgCTF,EAAqBC,IAAOC,IAAV,iDAhCT,IC/CAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb607d59.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\nimport styled from 'styled-components';\nimport { Button } from '@material-ui/core';\n\nconst INITIAL_ENERGIES = 3\nconst ENERGIES_PER_ROUND =  2\nconst MAX_ENERGY_PER_ROUND = 10\n\nfunction App() {\n  const [currentEnergies, setCurrentEnergies] = React.useState(INITIAL_ENERGIES)\n\n  function addEnergy(amount) {\n    if (currentEnergies + amount >= MAX_ENERGY_PER_ROUND) {\n      setCurrentEnergies(MAX_ENERGY_PER_ROUND)\n      return\n    }\n    setCurrentEnergies(e => e + amount)\n  }\n\n  function addOneEnergy() {\n    addEnergy(1)\n  }\n\n  function removeOneEnergy() {\n    addEnergy(-1)\n  }\n\n  function finishRound() {\n    addEnergy(ENERGIES_PER_ROUND)\n  }\n\n  function resetGame() {\n    setCurrentEnergies(INITIAL_ENERGIES)\n  }\n\n  return (\n    <Container className=\"App\">\n\n      <EnemyEnergiesContainer>\n        <EnemyEnergiesLabel>Enemy energies: {currentEnergies}</EnemyEnergiesLabel>\n      </EnemyEnergiesContainer>\n      <AddEnergyContainer>\n        <Button variant=\"contained\" color=\"primary\"  onClick={removeOneEnergy}>-1</Button>\n        <Button variant=\"contained\" color=\"primary\"  onClick={addOneEnergy}>+1</Button> \n      </AddEnergyContainer>\n      <FinishTurnContainer>\n        <Button variant=\"contained\" color=\"primary\" onClick={finishRound}>Finish round</Button>\n      </FinishTurnContainer>\n      <ResetGameContainer>\n        <Button variant=\"contained\" color=\"primary\" onClick={resetGame}>Reset game</Button>\n      </ResetGameContainer>\n\n    </Container>\n  );\n}\n\nexport default App;\n\nconst MARGIN = 16\n\nconst Container = styled.div`\n  padding: 50px;\n`\n\nconst EnemyEnergiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst EnemyEnergiesLabel = styled.div`\n  width: 80%;\n  background-color: white;\n  border-radius: 5px;\n  font-weight: bold;\n  font-size: 20px;\n  color: rgb(63 81 181);\n  padding: 16px;\n`\n\nconst AddEnergyContainer = styled.div`\n  margin-top: ${MARGIN}px;\n  display: flex;\n  justify-content: center;\n  gap: ${MARGIN}px;\n`\n\nconst FinishTurnContainer = styled.div`\n  margin-top: ${MARGIN}px;\n`\n\nconst ResetGameContainer = styled.div`\n  margin-top: ${MARGIN}px;\n`","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}